/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ReadingStatus as PrismaReadingStatus } from "@prisma/client";

export class ReadingStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReadingStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.readingStatus.count(args);
  }

  async readingStatuses(
    args: Prisma.ReadingStatusFindManyArgs
  ): Promise<PrismaReadingStatus[]> {
    return this.prisma.readingStatus.findMany(args);
  }
  async readingStatus(
    args: Prisma.ReadingStatusFindUniqueArgs
  ): Promise<PrismaReadingStatus | null> {
    return this.prisma.readingStatus.findUnique(args);
  }
  async createReadingStatus(
    args: Prisma.ReadingStatusCreateArgs
  ): Promise<PrismaReadingStatus> {
    return this.prisma.readingStatus.create(args);
  }
  async updateReadingStatus(
    args: Prisma.ReadingStatusUpdateArgs
  ): Promise<PrismaReadingStatus> {
    return this.prisma.readingStatus.update(args);
  }
  async deleteReadingStatus(
    args: Prisma.ReadingStatusDeleteArgs
  ): Promise<PrismaReadingStatus> {
    return this.prisma.readingStatus.delete(args);
  }
}
