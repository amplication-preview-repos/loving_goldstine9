/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TriggerWarning as PrismaTriggerWarning } from "@prisma/client";

export class TriggerWarningServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TriggerWarningCountArgs, "select">
  ): Promise<number> {
    return this.prisma.triggerWarning.count(args);
  }

  async triggerWarnings(
    args: Prisma.TriggerWarningFindManyArgs
  ): Promise<PrismaTriggerWarning[]> {
    return this.prisma.triggerWarning.findMany(args);
  }
  async triggerWarning(
    args: Prisma.TriggerWarningFindUniqueArgs
  ): Promise<PrismaTriggerWarning | null> {
    return this.prisma.triggerWarning.findUnique(args);
  }
  async createTriggerWarning(
    args: Prisma.TriggerWarningCreateArgs
  ): Promise<PrismaTriggerWarning> {
    return this.prisma.triggerWarning.create(args);
  }
  async updateTriggerWarning(
    args: Prisma.TriggerWarningUpdateArgs
  ): Promise<PrismaTriggerWarning> {
    return this.prisma.triggerWarning.update(args);
  }
  async deleteTriggerWarning(
    args: Prisma.TriggerWarningDeleteArgs
  ): Promise<PrismaTriggerWarning> {
    return this.prisma.triggerWarning.delete(args);
  }
}
